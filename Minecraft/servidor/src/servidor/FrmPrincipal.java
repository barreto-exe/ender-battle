/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidor;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.*;
import java.util.ArrayList;
import basedatos.*;
import basedatos.DBPartida.*;
import static basedatos.DBPartida.obtenerEstadoPartida;
import comunicacion.*;
import comunicacion.PaqueteOperacion.*;
import static comunicacion.PaqueteOperacion.Operacion.*;
import static comunicacion.PaqueteOperacion.ResultadoOperacion.*;

/**
 *
 * @author luisb
 */
public class FrmPrincipal extends javax.swing.JFrame implements Runnable
{

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal()
    {
        super("Servidor");
        initComponents();

        new Thread(this).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel = new javax.swing.JPanel();
        jtpPrincipal = new javax.swing.JTabbedPane();
        jpPrincipal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPrincipal = new javax.swing.JTextArea();
        jpRegistro = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRegistro = new javax.swing.JTextArea();
        jpInicioSesion = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtInicioSesion = new javax.swing.JTextArea();
        jpPartidas = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtPartidas = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setAutoscrolls(true);

        txtPrincipal.setColumns(20);
        txtPrincipal.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtPrincipal.setRows(5);
        jScrollPane1.setViewportView(txtPrincipal);

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpPrincipal.addTab("Principal", jpPrincipal);

        jScrollPane2.setAutoscrolls(true);

        txtRegistro.setColumns(20);
        txtRegistro.setRows(5);
        jScrollPane2.setViewportView(txtRegistro);

        javax.swing.GroupLayout jpRegistroLayout = new javax.swing.GroupLayout(jpRegistro);
        jpRegistro.setLayout(jpRegistroLayout);
        jpRegistroLayout.setHorizontalGroup(
            jpRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpRegistroLayout.setVerticalGroup(
            jpRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpPrincipal.addTab("Registro de Usuarios", jpRegistro);

        jScrollPane3.setAutoscrolls(true);

        txtInicioSesion.setColumns(20);
        txtInicioSesion.setRows(5);
        jScrollPane3.setViewportView(txtInicioSesion);

        javax.swing.GroupLayout jpInicioSesionLayout = new javax.swing.GroupLayout(jpInicioSesion);
        jpInicioSesion.setLayout(jpInicioSesionLayout);
        jpInicioSesionLayout.setHorizontalGroup(
            jpInicioSesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInicioSesionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpInicioSesionLayout.setVerticalGroup(
            jpInicioSesionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInicioSesionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpPrincipal.addTab("Inicio de Sesi√≥n", jpInicioSesion);

        jScrollPane4.setAutoscrolls(true);

        txtPartidas.setColumns(20);
        txtPartidas.setRows(5);
        jScrollPane4.setViewportView(txtPartidas);

        javax.swing.GroupLayout jpPartidasLayout = new javax.swing.GroupLayout(jpPartidas);
        jpPartidas.setLayout(jpPartidasLayout);
        jpPartidasLayout.setHorizontalGroup(
            jpPartidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPartidasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpPartidasLayout.setVerticalGroup(
            jpPartidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPartidasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpPrincipal.addTab("Partidas", jpPartidas);

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpPrincipal)
                .addContainerGap())
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpPrincipal)
                .addContainerGap())
        );

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        System.exit(1);
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel jpInicioSesion;
    private javax.swing.JPanel jpPartidas;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JPanel jpRegistro;
    private javax.swing.JTabbedPane jtpPrincipal;
    private javax.swing.JTextArea txtInicioSesion;
    private javax.swing.JTextArea txtPartidas;
    private javax.swing.JTextArea txtPrincipal;
    private javax.swing.JTextArea txtRegistro;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run()
    {
        System.out.println("Corriendo hilo server");
        Socket socket = null;

        try
        {
            ServerSocket servidor = new ServerSocket(27015);
            boolean responderResultado;
            
            while (true)
            {
                txtPrincipal.append("Esperando socket \n");
                socket = servidor.accept();
                responderResultado = true;
                
                String ip = socket.getInetAddress().toString().replaceAll("/", "");
                
                ObjectInputStream input  = new ObjectInputStream(socket.getInputStream());
                PaqueteOperacion paquete = (PaqueteOperacion) input.readObject();
                Operacion operacion = paquete.getTipo();
                
                txtPrincipal.append("Operacion: " + operacion.toString() + "|"+ ip +"\n\n");
                
                PaqueteResultado resultado = new PaqueteResultado(ResultadoOperacion.ERROR);
                
                //<editor-fold defaultstate="collapsed" desc="Registro/Inicio de sesi√≥n">
                if (operacion == INICIAR_SESION || operacion == REGISTRAR)
                {
                    DBUsuario usuarioObj = (DBUsuario) paquete.getInformacion();

                    String add = 
                            "Correo:"   + usuarioObj.getCorreo()  + "\n" +
                            "Usuario: " + usuarioObj.getUsuario() + "\n" +
                            "Pass: "    + usuarioObj.getPass()    + "\n" +
                            ip + "\n";

                    if (operacion == REGISTRAR)
                    {
                        txtRegistro.append("\n Registrar usuario: \n" + add);

                        //Verificar existencia de correo
                        if (DBUsuario.idCorreo(usuarioObj.getCorreo()) != -1)
                        {
                            txtRegistro.append("Correo no disponible. \n");
                            resultado.setResultado(CORREO_NO_DISPONIBLE);
                        }
                        //Verificar existencia de usuario
                        else if (DBUsuario.idUsuario(usuarioObj.getUsuario()) != -1)
                        {
                            txtRegistro.append("Usuario no disponible. \n");
                            resultado.setResultado(USUARIO_NO_DISPONIBLE);

                        }
                        //Si el usuario y el correo est√°n disponibles
                        else
                        {
                            if (DBUsuario.registrarUsuario(usuarioObj))
                            {
                                txtRegistro.append("Usuario registrado exitosamente. \n");
                                resultado.setResultado(USUARIO_REGISTRADO);
                            }
                            else
                            {
                                txtRegistro.append("Hubo un error al registrar el usuario. \n");
                                resultado.setResultado(ResultadoOperacion.ERROR);
                            }
                        }
                    }

                    if (operacion == INICIAR_SESION)
                    {
                        txtInicioSesion.append("\n Iniciar sesi√≥n usuario: \n" + add);
                        int idUsuario = DBUsuario.consultarUsuario(usuarioObj);
                        
                        //Verificar datos de usuario
                        if (idUsuario == -1)
                        {
                            txtInicioSesion.append("Credencial de usuario inv√°lida. \n");
                            resultado.setResultado(CREDENCIAL_INVALIDA);
                        }
                        else
                        {
                            txtInicioSesion.append("Inicio de sesi√≥n v√°lido. \n");
                            resultado.setResultado(SESION_VALIDA);
                            resultado.setInformacion(idUsuario);
                        }
                    }
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="Crear Partida">
                if (operacion == CREAR_PARTIDA)
                {
                    DBPartida partida = (DBPartida) paquete.getInformacion();
                    
                    String add = 
                        "Nombre Partida: " + partida.getNombre()            + "\n" +
                        "Descripcion:"     + partida.getDescripcion()       + "\n" +
                        "Cantidad Jug.:"   + partida.getLimiteJugadores() + "\n" +
                        ip + "\n";
                    
                    txtPartidas.append(add + "Crear partida \n\n");
                    
                    if(DBPartida.crearPartida(partida))
                    {
                        resultado.setResultado(ResultadoOperacion.PARTIDA_CREADA);
                        resultado.setInformacion(DBPartida.idUltimaPartida());
                    }
                    else
                    {
                        resultado.setResultado(ResultadoOperacion.PARTIDA_YA_EXISTE);
                    }
                }
                //</editor-fold>
                
                //<editor-fold defaultstate="collapsed" desc="Unirse a partida">
                if(operacion == UNIRSE_PARTIDA)
                {
                    DBUsuario usuario = (DBUsuario) paquete.getInformacion();
                    
                    String add = 
                            "Nombre: "     + usuario.getUsuario()  + "\n" +
                            "Personaje: "  + usuario.getPersonajeSeleccionado() + "\n" +
                            "Partida: "    + usuario.getPartida() + "\n";
                    
                    txtPartidas.append(add + "Unirse a partida \n\n");
                    
                    if(DBPartida.agregarJugador(usuario, ip))
                    {
                        resultado.setResultado(ResultadoOperacion.UNIDO_EXITOSAMENTE);
                        resultado.setInformacion(usuariosPartida(usuario.getPartida()));
                    }
                    else
                    {
                        resultado.setResultado(ResultadoOperacion.PARTIDA_LLENA);
                    }
                }
                //</editor-fold>
                
                //<editor-fold defaultstate="collapsed" desc="Salir de Partida">
                if(operacion == SALIR_PARTIDA)
                {
                    DBUsuario usuario = (DBUsuario) paquete.getInformacion();

                    String add =
                            "Nombre: "     + usuario.getUsuario()  + "\n" +
                            "Personaje: "  + usuario.getPersonajeSeleccionadoString() + "\n" +
                            "Partida: "    + usuario.getPartida() + "\n";

                    txtPartidas.append(add + "Salir de partida \n\n");

                    resultado.setResultado(SALIR_PARTIDA_EXITOSO);
                    DBPartida.sacarJugador(usuario);
                }
                //</editor-fold>
                
                //<editor-fold defaultstate="collapsed" desc="Actualizar usuarios y estado de partida">
                //Si se pide enviar la lista de jugadores
                if(operacion == PEDIR_ESTADO_PARTIDA)
                {
                    int partida = ((DBPartida) paquete.getInformacion()).getId();
                    EstadoPartida estado = obtenerEstadoPartida(partida);
                    
                    switch (estado)
                    {
                        case LOBBY:
                        {
                            resultado.setResultado(USUARIOS_PARTIDA);
                            resultado.setInformacion(usuariosPartida(partida));
                            break;
                        }
                        case JUGANDO:
                        {
                            resultado.setResultado(PARTIDA_INICIADA);
                            break;
                        }
                        case TERMINADA:
                        {
                            resultado.setResultado(PARTIDA_TERMINADA);
                            break;
                        }
                    }
                }
                //</editor-fold>
                
                //<editor-fold defaultstate="collapsed" desc="Actualizar partidas activas">
                if(operacion == PEDIR_PARTIDAS_ACTIVAS)
                {
                    resultado.setResultado(PARTIDAS_ACTIVAS);
                    resultado.setInformacion(partidasActivas());
                }
                //</editor-fold>
                
                if(operacion == COMENZAR_PARTIDA)
                {
                    int partida = ((DBPartida) paquete.getInformacion()).getId();
                    
                    DBPartida.comenzarPartida(partida);
                    resultado.setResultado(PARTIDA_INICIADA);
                }
                
                //**************************************************************
                //Enviar respuesta al cliente
                if(responderResultado)
                {
                    try
                    {
                        ObjectOutputStream paqueteEnvio = new ObjectOutputStream(socket.getOutputStream());
                        paqueteEnvio.writeObject(resultado);
                    }
                    catch(IOException ex)
                    {
                        System.out.println(ex.getMessage());
                        txtPrincipal.append(ex.getMessage() + "\n" + ex.getStackTrace().toString() + "\n");
                    }
                    socket.close();
                }
            }

        } 
        catch (IOException | ClassNotFoundException ex)
        {
            System.out.println(ex.getMessage());
            txtPrincipal.append(ex.getMessage() + "\n" + ex.getStackTrace().toString() + "\n");
        }
    }
    
    private static ArrayList<DBUsuario> usuariosPartida(int idPartida)
    {
        ArrayList<DBUsuario> usuarios = new ArrayList<DBUsuario>();
        String query = 
                "SELECT id_jugador as id, ( SELECT u.usuario FROM m_usuarios u WHERE u.id = id_jugador ) AS usuario, personajeSeleccionado, ip \n" +
                "FROM m_partidas_jugadores WHERE id_partida = ?";
        DBOperacion operacion = new DBOperacion(query);
        operacion.pasarParametro(idPartida);
        
        DBMatriz resultado = operacion.consultar();
        
        while(resultado.leer())
        {
            usuarios.add(new DBUsuario(
                    (String) resultado.getValor("usuario"), 
                    (String) resultado.getValor("ip"),
                    (int) resultado.getValor("id"),
                    (int) resultado.getValor("personajeSeleccionado")
            ));
        }
        
        return usuarios;
    }
    
    private static int cantidadUsuariosPartida(int idPartida)
    {
        String query = 
                "SELECT COUNT(*) as cantidadJugadores \n" +
                "FROM m_partidas_jugadores WHERE id_partida = ?";
        DBOperacion operacion = new DBOperacion(query);
        operacion.pasarParametro(idPartida);
        
        DBMatriz resultado = operacion.consultar();
        
        if(resultado.leer())
        {
            return (int)resultado.getValor("cantidadJugadores");
        }
        else
        {
            return -1;
        }
        
    }
    
    private static ArrayList<DBPartida> partidasActivas()
    {
        ArrayList<DBPartida> partidas = new ArrayList<DBPartida>();
        String query = "SELECT * FROM m_partidas WHERE estado < 3";
        DBOperacion operacion = new DBOperacion(query);

        DBMatriz resultado = operacion.consultar();

        String nombre, descripcion;
        EstadoPartida estado = EstadoPartida.LOBBY;
        int id, limiteJugadores, cantidadJugadores, estadoInt;
        
        while(resultado.leer())
        {
            nombre = (String) resultado.getValor("nombre");
            descripcion = (String) resultado.getValor("descripcion");
            estadoInt = (int) resultado.getValor("estado");
            switch(estadoInt)
            {
                case 1:
                {
                    estado = EstadoPartida.LOBBY;
                    break;
                }
                case 2:
                {
                    estado = EstadoPartida.JUGANDO;
                    break;
                }
            }
            
            id = (int) resultado.getValor("id");
            limiteJugadores = (int) resultado.getValor("limiteJugadores");
            cantidadJugadores = cantidadUsuariosPartida(id);
            
            partidas.add(new DBPartida(nombre,descripcion,estado,limiteJugadores,cantidadJugadores,id));
        }
         
        return partidas;
    }
}
